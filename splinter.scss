/**
 *  File:       splinter.scss
 *  Version:    1.1.1
 *  Date:       May 5, 2015
 *  Link:       https://github.com/JordyPouw/splinter
 *  Author:     Jordy Pouw
 */


// $ Settings.
// ==================================================
$grid-columns:          12        !default;
$grid-row-width:        1200px    !default;
$grid-gutter-width:     30px      !default;
$grid-query-width-sm:   568px     !default;
$grid-query-width-md:   768px     !default;
$grid-query-width-lg:   1024px    !default;

$grid-create-push:      true      !default;
$grid-create-pull:      true      !default;
$grid-create-offset:    true      !default;

$grid-prefix:           g-        !default;
$grid-row:              row12     !default;
$grid-col:              col       !default;
$grid-push:             push      !default;
$grid-pull:             pull      !default;
$grid-offset:           offset    !default;
$grid-suffix-xs:        --xs      !default;
$grid-suffix-sm:        --sm      !default;
$grid-suffix-md:        --md      !default;
$grid-suffix-lg:        --lg      !default;


// $ Tools.
// ==================================================
@function em($target, $context: 16px) {
  @return ($target / $context) * 1em;
}

@mixin grid-mq($width) {
  @if $width == min-sm {
    @media only screen and (min-width: em($grid-query-width-sm + 1)) {@content;}
  }

  @else if $width == max-sm {
    @media only screen and (max-width: em($grid-query-width-sm)) {@content;}
  }

  @else if $width == min-md {
    @media only screen and (min-width: em($grid-query-width-md + 1)) {@content;}
  }

  @else if $width == max-md {
    @media only screen and (max-width: em($grid-query-width-md)) {@content;}
  }

  @else if $width == min-lg {
    @media only screen and (min-width: em($grid-query-width-lg + 1)) {@content;}
  }

  @else if $width == max-lg {
    @media only screen and (max-width: em($grid-query-width-lg)) {@content;}
  }
}

@mixin custom-mq($min-max, $width) {
  @if $min-max == min {
    @media only screen and (min-width: em($width + 1)) {@content;}
  }

  @else if $min-max == max {
    @media only screen and (max-width: em($width)) {@content;}
  }
}

@mixin grid-setting($grid-media-query, $grid-method, $prop) {
  @for $index from 1 through $grid-columns {    
    // If push or pull, add 0.
    @if ($grid-method == $grid-push) and ($index == 1) or ($grid-method == $grid-pull) and ($index == 1){
      .#{$grid-prefix}#{$grid-method}0#{$grid-media-query} {
        #{$prop}: auto;
      }
    }
    // If offset, add 0.
    @if ($grid-method == $grid-offset) and ($index == 1){
      .#{$grid-prefix}#{$grid-method}0#{$grid-media-query} {
        #{$prop}: 0;
      }
    }   
    // Normal loop from 1 through amount of columns.
    .#{$grid-prefix}#{$grid-method}#{$index}#{$grid-media-query} {
      #{$prop}: percentage(($index/$grid-columns));
    }
  }
}

@mixin make-grid($grid-media-query){
  @include grid-setting($grid-media-query, $grid-col, width);
  
  @if($grid-create-push == true){
    @include grid-setting($grid-media-query, $grid-push, left);
  }
  
  @if($grid-create-pull == true){
    @include grid-setting($grid-media-query, $grid-pull, right);
  }
  
  @if($grid-create-offset == true){
    @include grid-setting($grid-media-query, $grid-offset, margin-left);
  }
}


/** 
 $ Box Sizing Model.
 ==================================================
 */
*, 
*:before, 
*:after { 
  box-sizing: border-box;
}


/** 
 $ ClearFix Method.
 ==================================================
 */
.#{$grid-prefix}#{$grid-row}:after {
  content: " ";
  display: table;
  clear: both;

  .#{$grid-prefix}#{$grid-row} & {
    content: " ";
    display: table;
    clear: both;    
  }
}


/** 
 $ Grid Fundamentals.
 ==================================================
 */
.#{$grid-prefix}#{$grid-row} {
  width: 100%;
  max-width: $grid-row-width;
  margin: 0 auto;
  & .#{$grid-prefix}#{$grid-row} {
    width: auto;
    max-width: none;
    margin: 0 -($grid-gutter-width / 2);
  }
}

[class^="#{$grid-prefix}#{$grid-col}"], 
[class*=" #{$grid-prefix}#{$grid-col}"] {
  float: left;
  position: relative;
  min-height: 1px;
  padding: 0 ($grid-gutter-width / 2);
}


/** 
 $ Mobile First: Extra small.
 ==================================================
 */
@include make-grid($grid-suffix-xs);


/** 
 $ Media Query: Small.
 ==================================================
 */
@include grid-mq(min-sm) {
  @include make-grid($grid-suffix-sm);
}


/** 
 $ Media Query: Medium.
 ==================================================
 */
@include grid-mq(min-md) {
  @include make-grid($grid-suffix-md);
}


/** 
 $ Media Query: Large.
 ==================================================
 */
@include grid-mq(min-lg) {
  @include make-grid($grid-suffix-lg);
}
